_target_: topobench.model.TBModel

model_name: GPS 
model_domain: graph

feature_encoder:
  _target_: topobench.nn.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllCellFeatureEncoder
  in_channels: ${infer_in_channels:${dataset},${oc.select:transforms,null}} 
  out_channels: 32
  proj_dropout: 0.0

backbone:
  _target_: topobench.nn.backbones.GPSEncoder
  input_dim: ${model.feature_encoder.out_channels}
  hidden_dim: ${model.feature_encoder.out_channels}
  num_layers: 4
  pe_dim: 10 pe_dim: 10 # Keep at 10! Bit of a clumsy solution for now.
  pe_type: laplacian # laplacian, degree, rwse or None
  pe_norm: false # true or false
  dropout: 0.5
  heads: 4
  attn_type: multihead # multihead or performer
  local_conv_type: gin # gin or pna

backbone_wrapper:
  _target_: topobench.nn.wrappers.GNNWrapperWithPE 
  _partial_: true
  wrapper_name: GNNWrapperWithPE
  pe_type: ${model.backbone.pe_type}
  out_channels: ${model.feature_encoder.out_channels}
  residual_connections: false
  num_cell_dimensions: ${infer_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}}

readout:
  _target_: topobench.nn.readouts.${model.readout.readout_name}
  readout_name: NoReadOut #  Use <NoReadOut> in case readout is not needed Options: PropagateSignalDown
  num_cell_dimensions: ${infer_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}} # The highest order of cell dimensions to consider
  hidden_dim: ${model.feature_encoder.out_channels}
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  pooling_type: sum

# compile model for faster training with pytorch 2.0
compile: false

