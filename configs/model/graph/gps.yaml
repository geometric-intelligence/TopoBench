_target_: topobench.model.TBModel

model_name: GPS 
model_domain: graph

feature_encoder:
  _target_: topobench.nn.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllCellFeatureEncoder
  in_channels: ${infer_in_channels:${dataset},${oc.select:transforms,null}} 
  out_channels: 64
  proj_dropout: 0.2

backbone:
  _target_: topobench.nn.backbones.GPSEncoder
  input_dim: ${model.feature_encoder.out_channels}
  hidden_dim: ${model.feature_encoder.out_channels} # SWEEP!: [32,64] (not more because feature dim of graph only 15)
  num_layers: 4 # SWEEP: [2,4] (3 if we have a lot of time)
  dropout: 0.4 # SWEEP: [0.0, 0.25, 0.5]
  heads: 4 # SWEEP: [4,8]
  attn_type: multihead # SWEEP: [multihead, performer]
  local_conv_type: gin # no sweep. 

backbone_wrapper:
  _target_: topobench.nn.wrappers.${model.backbone_wrapper.wrapper_name}
  _partial_: true
  wrapper_name: GNNWrapper
  out_channels: ${model.feature_encoder.out_channels}
  residual_connections: false
  num_cell_dimensions: ${infer_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}}

readout:
  _target_: topobench.nn.readouts.${model.readout.readout_name}
  readout_name: MLPReadout 
  num_cell_dimensions: ${infer_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}} # The highest order of cell dimensions to consider
  in_channels: ${model.feature_encoder.out_channels}
  hidden_layers: [16]
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  pooling_type: sum
  # Extra MLP params
  dropout: 0.2
  act: "relu"
  norm: null
  final_act: null

# compile model for faster training with pytorch 2.0
compile: false