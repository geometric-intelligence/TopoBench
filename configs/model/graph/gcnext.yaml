_target_: topobenchmark.model.TBModel

model_name: gcnext
model_domain: graph

feature_encoder:
  _target_: topobenchmark.nn.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllCellFeatureEncoder
  in_channels: ${infer_in_channels:${dataset},${oc.select:transforms,null}} 
  out_channels: 1
  proj_dropout: 0.0

backbone:
  _target_: topobenchmark.nn.backbones.graph.GCNext
  config:
    motion_dataset:
      n_frames: 50 # there has to be a better way to do this
      n_joints: 22
      n_channels: 3
    motion_mlp:
      num_layers: 48
      with_normalization: true
      spatial_fc_only: false
      norm_axis: 'spatial'
      use_skeletal_hyperedges: true
    temporal_fc_in: false
    temporal_fc_out: false
    compute_in_freq_domain: true
  dyna_idx: [0, 48]

backbone_wrapper:
  _target_: topobenchmark.nn.wrappers.GNNWrapper
  _partial_: true
  residual_connections: false
  wrapper_name: GNNWrapper
  out_channels: ${model.feature_encoder.out_channels}
  num_cell_dimensions: ${infere_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}}

readout:
  _target_: topobenchmark.nn.readouts.${model.readout.readout_name}
  readout_name: NoReadOut #  Use <NoReadOut> in case readout is not needed Options: PropagateSignalDown
  num_cell_dimensions: ${infere_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}} # The highest order of cell dimensions to consider
  hidden_dim: ${model.feature_encoder.out_channels}
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  # pooling_type: sum

# compile model for faster training with pytorch 2.0
compile: false
