_target_: topobenchmarkx.model.TBXModel

defaults:
  - modules@kan_params: kan

model_name: kan_topotune
model_domain: cell
tune_gnn: KANGCN

feature_encoder:
  _target_: topobenchmarkx.nn.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllCellFeatureEncoder
  in_channels: ${infer_in_channels:${dataset},${oc.select:transforms,null}} 
  out_channels: 32
  proj_dropout: 0.
  selected_dimensions:
    - 0
    - 1
    - 2
  kan_params: ${model.kan_params}
  kan_model: "efficient"

backbone:
  _target_: topobenchmarkx.nn.backbones.combinatorial.gccn.TopoTune
  GNN:
    _target_: topobenchmarkx.nn.backbones.graph.${model.tune_gnn}
    in_channels: ${model.feature_encoder.out_channels}
    out_channels: ${model.feature_encoder.out_channels}
    hidden_channels: ${model.feature_encoder.out_channels}
    num_layers: 2
    norm: BatchNorm
    kan_params: ${model.kan_params}
    kan_model: "efficient"
  routes:
    - - [1, 1]
      - adjacency
    - - [0, 1]
      - cbdry
    - - [2, 1]
      - bdry
  layers: 2
  use_edge_attr: false
  activation: id

backbone_wrapper:
  _target_: topobenchmarkx.nn.wrappers.combinatorial.TuneWrapper
  _partial_: true
  wrapper_name: TuneWrapper
  out_channels: ${model.feature_encoder.out_channels}
  num_cell_dimensions: ${infere_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}}

readout:
  _target_: topobenchmarkx.nn.readouts.${model.readout.readout_name}
  readout_name: PropagateSignalDown #  Use <NoReadOut> in case readout is not needed Options: PropagateSignalDown
  num_cell_dimensions: ${infere_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}} # The highest order of cell dimensions to consider
  hidden_dim: ${model.feature_encoder.out_channels}
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  pooling_type: sum

# compile model for faster training with pytorch 2.0
compile: false
