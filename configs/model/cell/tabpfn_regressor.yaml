_target_: topobench.model.TBModel

model_name: tabpfn
model_domain: cell

feature_encoder:
  _target_: topobench.nn.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllPCAFeatureEncoder
  in_channels: ${infer_in_channels:${dataset},${oc.select:transforms,null}}
  out_channels: 256

backbone:
  _target_: tabpfn.TabPFNRegressor
  ignore_pretraining_limits: True
  random_state: 42
  device: cuda:0

backbone_wrapper:
  _target_: topobench.nn.wrappers.graph.tabpfn.TabPFNRegressorWrapper
  _partial_: true
  wrapper_name: TabPFNRegressorWrapper
  use_embeddings: True
  sampler:
    _target_: topobench.nn.wrappers.graph.tabpfn.${model.backbone_wrapper.sampler.sampler_name}
    sampler_name: CompositeSampler
    k: 5 # Number of samples to use fr the TabPFN model, define during the run
    n_hops: 3 # Number of hops to sample from the graph, define during the run
  


readout:
  _target_: topobench.nn.readouts.${model.readout.readout_name}
  readout_name: TabPFNReadOut #  Use <NoReadOut> in case readout is not needed Options: PropagateSignalDown
  num_cell_dimensions: ${infer_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}} # The highest order of cell dimensions to consider
  hidden_dim: ${model.feature_encoder.out_channels}
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  pooling_type: sum

# compile model for faster training with pytorch 2.0
compile: false
