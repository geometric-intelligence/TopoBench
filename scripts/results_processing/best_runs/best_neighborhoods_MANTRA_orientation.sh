
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','down_incidence-1','down_incidence-2'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','down_incidence-1','down_incidence-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[0\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=256 model.readout.hidden_dim=256 model.feature_encoder.out_channels=256 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[0\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-1','down_adjacency-2','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=256 model.readout.hidden_dim=256 model.feature_encoder.out_channels=256 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-1','down_adjacency-2','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[1\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-2'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[1\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=256 model.readout.hidden_dim=256 model.feature_encoder.out_channels=256 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[2\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=1 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[2\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=1 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[3\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[3\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_GPSE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','down_incidence-1','down_incidence-2'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','down_incidence-1','down_incidence-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[4\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[4\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-1','down_adjacency-2','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-1','down_adjacency-2','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[5\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-2'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[5\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=2 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[6\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[6\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=256 model.readout.hidden_dim=256 model.feature_encoder.out_channels=256 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_incidence-0','up_incidence-1'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[7\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=256 model.readout.hidden_dim=256 model.feature_encoder.out_channels=256 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[7\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_reproducibility_neighbourhoods --multirun &  # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
