#!/usr/bin/env bash

# Define log files
LOG_FILE="scripts/script_output.log"
ERROR_LOG_FILE="scripts/script_error.log"
FAILED_LOG_FILE="scripts/failed_runs.log"

# Clear previous log files
> "$LOG_FILE"
> "$ERROR_LOG_FILE"
> "$FAILED_LOG_FILE"

# Function to run a command and check for failure
run_command() {
	local cmd="$1"
	# Run the command and capture the output and error
	{ eval "$cmd" 2>&1 | tee -a "$LOG_FILE"; } 2>> "$ERROR_LOG_FILE"
	# Check if the command failed
	if [ ${PIPESTATUS[0]} -ne 0 ]; then
		echo "Command failed: $cmd" >> "$FAILED_LOG_FILE"
		echo "Check $ERROR_LOG_FILE for details." >> "$FAILED_LOG_FILE"
	fi
}

commands=(
'python -m topobench dataset=simplicial/mantra_betti_numbers model=simplicial/sccnn_custom model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.backbone.sc_order=3 model.backbone.conv_order=1 model.readout.readout_name=PropagateSignalDown optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=128 dataset.loader.parameters.manifold_dim=2 evaluator=betti_numbers  dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[2\] callbacks.early_stopping.patience=10 logger.wandb.tags=["sccnn","simplicial"] logger.wandb.project=HOPSE_mantra_check_2005 --multirun' # sccnn,MANTRA_betti_numbers,simplicial
'python -m topobench dataset=simplicial/mantra_orientation model=simplicial/sccnn_custom model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.readout.hidden_dim=64 model.feature_encoder.out_channels=64 model.backbone.sc_order=3 model.backbone.conv_order=1 model.readout.readout_name=PropagateSignalDown optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=128 dataset.loader.parameters.manifold_dim=2   dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[0\] callbacks.early_stopping.patience=10 logger.wandb.tags=["sccnn","simplicial"] logger.wandb.project=HOPSE_mantra_check_2005 --multirun' # sccnn,MANTRA_orientation,simplicial
'python -m topobench dataset=simplicial/mantra_betti_numbers model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] transforms.sann_encoding.pretrain_model=ZINC model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=256 model.readout.hidden_dim=256 model.feature_encoder.out_channels=256 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3 evaluator=betti_numbers transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[2\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_mantra_check_2005 --multirun' # HOPSE_GPSE,MANTRA_betti_numbers,simplicial
'python -m topobench dataset=simplicial/mantra_betti_numbers model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=256 model.readout.hidden_dim=256 model.feature_encoder.out_channels=256 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3 evaluator=betti_numbers transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','2-up_adjacency-0','down_adjacency-1','down_adjacency-2','2-down_adjacency-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[2\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_mantra_check_2005 --multirun' # HOPSE_MANUAL_PE,MANTRA_betti_numbers,simplicial
'python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_g transforms.sann_encoding.max_hop=2 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-2'] transforms.sann_encoding.pretrain_model=PCQM4MV2 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.sann_encoding.copy_initial=True transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[0\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_GPSE","simplicial"] logger.wandb.project=HOPSE_mantra_check_2005 --multirun' # HOPSE_GPSE,MANTRA_orientation,simplicial
'python -m topobench dataset=simplicial/mantra_orientation model=simplicial/hopse_m transforms.sann_encoding.max_hop=4 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-1','down_adjacency-2','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=256 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.copy_initial=True transforms.sann_encoding.is_undirected=True transforms.redefine_simplicial_neighborhoods.signed=True transforms.redefine_simplicial_neighborhoods.complex_dim=3  transforms.redefine_simplicial_neighborhoods.neighborhoods=['up_adjacency-0','up_adjacency-1','down_adjacency-1','down_adjacency-2','up_incidence-0','up_incidence-1','down_incidence-1','down_incidence-2'] transforms.redefine_simplicial_neighborhoods.signed=True dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[0\] callbacks.early_stopping.patience=10 logger.wandb.tags=["HOPSE_MANUAL_PE","simplicial"] logger.wandb.project=HOPSE_mantra_check_2005 --multirun' # HOPSE_MANUAL_PE,MANTRA_orientation,simplicial
# 'python -m topobench dataset=simplicial/mantra_betti_numbers model=simplicial/sann transforms.sann_encoding.max_hop=3 transforms.sann_encoding.max_rank=2 transforms.sann_encoding.complex_dim=3 model.feature_encoder.proj_dropout=0.25 model.backbone.n_layers=4 model.backbone.hidden_channels=128 model.readout.hidden_dim=128 model.feature_encoder.out_channels=128 model.readout.readout_name=SANNReadout optimizer.parameters.weight_decay=0.0 optimizer.parameters.lr=0.001 dataset.dataloader_params.batch_size=128 dataset.loader.parameters.manifold_dim=2 transforms.sann_encoding.use_initial_features=True evaluator=betti_numbers  dataset.split_params.data_seed=0,3,5,7,9 trainer.max_epochs=500 trainer.min_epochs=250 trainer.check_val_every_n_epoch=5 trainer.devices=\[2\] callbacks.early_stopping.patience=10 logger.wandb.tags=["SANN","simplicial"] logger.wandb.project=HOPSE_mantra_check_2005 --multirun' # SANN,MANTRA_betti_numbers,simplicial
)

# Iterate over the commands and run them
for cmd in "${commands[@]}"; do
	echo "Running: $cmd"
	run_command "$cmd"
done